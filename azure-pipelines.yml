# Azure DevOps Pipeline for Angular Application with Docker
trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - src/*
    - package.json
    - angular.json
    - Dockerfile
    - nginx.conf

variables:
  # Container Registry variables
  containerRegistry: 'your-container-registry.azurecr.io'
  imageRepository: 'angular-frontend'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Azure Web App variables
  azureSubscription: 'your-azure-subscription'
  webAppName: 'your-angular-webapp'
  resourceGroupName: 'your-resource-group'
  
  # Build variables
  vmImageName: 'ubuntu-latest'
  nodeVersion: '18.x'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build Angular App
    pool:
      vmImage: $(vmImageName)
    
    steps:
    # Checkout source code
    - checkout: self
      displayName: 'Checkout Repository'
    
    # Setup Node.js
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    # Cache npm dependencies
    - task: Cache@2
      displayName: 'Cache npm dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(npm_config_cache)'
    
    # Install dependencies
    - script: |
        npm ci
      displayName: 'Install Dependencies'
    
    # Run linting
    - script: |
        npm run lint
      displayName: 'Run Linting'
      continueOnError: true
    
    # Run unit tests
    - script: |
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      displayName: 'Run Unit Tests'
    
    # Publish test results
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
      condition: succeededOrFailed()
    
    # Publish code coverage
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
      condition: succeededOrFailed()
    
    # Build Angular application
    - script: |
        npm run build --prod
      displayName: 'Build Angular Application'
    
    # Copy files to staging directory
    - task: CopyFiles@2
      displayName: 'Copy Build Output'
      inputs:
        SourceFolder: 'dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/dist'
    
    # Copy Docker files
    - task: CopyFiles@2
      displayName: 'Copy Docker Files'
      inputs:
        Contents: |
          Dockerfile
          nginx.conf
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Docker
  displayName: Build and Push Docker Image
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Docker
    displayName: Build Docker Image
    pool:
      vmImage: $(vmImageName)
    
    steps:
    # Download build artifacts
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    # Docker login
    - task: Docker@2
      displayName: 'Login to Container Registry'
      inputs:
        command: 'login'
        containerRegistry: $(containerRegistry)
    
    # Build Docker image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: '$(System.ArtifactsDirectory)/drop/Dockerfile'
        buildContext: '$(System.ArtifactsDirectory)/drop'
        tags: |
          $(tag)
          latest
    
    # Push Docker image
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        repository: $(imageRepository)
        tags: |
          $(tag)
          latest
    
    # Security scan (optional)
    - task: Docker@2
      displayName: 'Security Scan'
      inputs:
        command: 'run'
        arguments: '--rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $(containerRegistry)/$(imageRepository):$(tag)'
      continueOnError: true

- stage: Deploy_Dev
  displayName: Deploy to Development
  dependsOn: Docker
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: Deploy_Dev
    displayName: Deploy to Development Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy to Azure Web App for Containers
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(webAppName)-dev'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              
          # Restart web app
          - task: AzureAppServiceManage@0
            displayName: 'Restart Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              Action: 'Restart Azure App Service'
              WebAppName: '$(webAppName)-dev'
              ResourceGroupName: $(resourceGroupName)

- stage: Deploy_Prod
  displayName: Deploy to Production
  dependsOn: Docker
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy_Prod
    displayName: Deploy to Production Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Manual approval gate (configured in Azure DevOps)
          
          # Deploy to Azure Web App for Containers
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              
          # Restart web app
          - task: AzureAppServiceManage@0
            displayName: 'Restart Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              Action: 'Restart Azure App Service'
              WebAppName: $(webAppName)
              ResourceGroupName: $(resourceGroupName)
          
          # Health check
          - task: PowerShell@2
            displayName: 'Health Check'
            inputs:
              targetType: 'inline'
              script: |
                $response = Invoke-WebRequest -Uri "https://$(webAppName).azurewebsites.net/health" -UseBasicParsing
                if ($response.StatusCode -eq 200) {
                  Write-Host "Health check passed"
                } else {
                  Write-Error "Health check failed"
                  exit 1
                }
